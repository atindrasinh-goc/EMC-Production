<apex:page showHeader="false" title="Driver Details" sidebar="false" controller="DriverManagerDriverDetailsController" action="{!getRedirected}">
    <html lang="en">
        <head>
            <apex:include pageName="EMC_Common_Head"/>
            <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
            <script src="https://code.angularjs.org/1.4.0-beta.5/angular.js"></script>            
            <script src="https://gitcdn.github.io/bootstrap-toggle/2.1.0/js/bootstrap-toggle.min.js"></script>
            <script src="https://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-0.9.0.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
            <!-- Added By Megha - 31/03/2020 -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js"></script>
            <!-- Added By Megha - 31/03/2020 -->
            <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />
            
            <!-- for excel download directive-->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.1/jszip.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.1/xlsx.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
            <!-- for complete excel download directive-->
            <script src="{!URLFOR($Resource.modelJs)}"></script>
            <script src="{!URLFOR($Resource.dirPagination)}"></script>
            <style type="text/css">   
                @media screen and (max-width: 767px) and (min-width: 320px){
                 #driver-dashboard-monthrecord #example_filter {
                    right: 0px !important;
                    top: 8px !important;
                    }         
                 .w-85{
                     width:84% !important;
                 }
                }
                .modal-backdrop.fade 
                {
                   opacity: 0.7 !important;
                }
                .fade:not(.show)
                {
                    opacity: 1;
                }
                #modalbackdrop {
                    /*opacity: 0.7 !important;*/
                    z-index: 1050 !important;
                }
                .modal-dialog 
                {
                    z-index: 1057;
                }
                .table-nodata
                {
                  text-align: center;
                }
                /*table#driver-dashbord-month-model span.sort-icon 
                {
                    margin-top: 7px;
                    vertical-align: middle;
                    font-size: 12px;
                    right: 0;
                }*/
                .pagination {
                    display: inline-block;
                    padding-left: 0;
                    margin: 20px 0;
                    border-radius: 4px;
                }
                .pagination>li {
                    display: inline;
                }
                .pagination>li>a, .pagination>li>span {
                    position: relative;
                    float: left;
                    padding: 6px 12px;
                    margin-left: -1px;
                    line-height: 1.42857143;
                    color: #78bc42;
                    text-decoration: none;
                    background-color: #fff;
                    border: 1px solid #ddd;
                }
                .pagination>li:first-child>a, .pagination>li:first-child>span {
                    margin-left: 0;
                    border-top-left-radius: 4px;
                    border-bottom-left-radius: 4px;
                }
                .pagination>.disabled>a, .pagination>.disabled>a:focus, .pagination>.disabled>a:hover, .pagination>.disabled>span, .pagination>.disabled>span:focus, .pagination>.disabled>span:hover {
                        color: #777;
                        cursor: not-allowed;
                        background-color: #fff;
                        border-color: #ddd;
                }
                .pagination>.disabled>a, .pagination>.disabled>a:focus, .pagination>.disabled>a:hover, .pagination>.disabled>span, .pagination>.disabled>span:focus, .pagination>.disabled>span:hover {
                        color: #78bc42;
                        cursor: not-allowed;
                        background-color: #fff;
                        border-color: #ddd;
                }
                .pagination>.active>a, .pagination>.active>a:focus, .pagination>.active>a:hover, .pagination>.active>span, .pagination>.active>span:focus, .pagination>.active>span:hover {
                    z-index: 3;
                    color: #fff;
                    cursor: default;
                    background-color: #78bc42;
                    border-color: #78bc42;
                }
                table#driver-dashbord-month-model span.sort-icon {
                    font-size: 12px;
                    vertical-align: middle;
                    margin-top: 7px;
                }
                .rt{
                   
                }
                table.dataTable thead th, table.dataTable thead td 
                {
                    padding: 10px 7px!important;                    
                }
                .disable-pagination{
                    pointer-events: none;
                }
                .paginationformodal 
                {    
                    margin: 0px 0 !important;   
                }
                .paginationformodaldownloadbutton 
                {
                    margin-top: 0px;
                }
                .piginationpages
                {
                    color: #78bc42 !important;
                }
                .paginationformodal > a
                {
                    color: #78bc42 !important;
                }
                .spinner-background {
                    width: 100%; 
                    height:100%; 
                    background:#000; 
                    opacity: 0.4; 
                    top:0px; 
                    left:0px; 
                    position: fixed; 
                    z-index:1000000;
                }

                .spinner-load {
                    position:fixed;
                    top:49%;
                    left:49%;
                    z-index:1000000;
                }
                .rowforplan 
                {
                    margin-right: -15px;
                    margin-left: -15px;
                }
                .form-control:focus {
                outline: 0 !important;
                border-color: initial;
                box-shadow: none;
                }
                /*.tr-taxcalcutlation-1 {
                    background: #d8e6ce !important;
                }
                .tr-taxcalcutlation-2 {
                    background: #ffffff !important;
                }*/
                  /* AI-000206 - Start*/
                  #example_filter {
                        position: absolute;
                        right: 0px;
                        top: 0px;
                        }
                 #filtericon{
                    padding: 10px;
                    right: 0;
                    position: absolute;
                    display: block;
                    z-index: 4;
                    cursor: pointer;
                 }
                 .mr-11{
                     margin-right: 12px !important;
                 }
                 .w-85 {
                    width: 89% !important;
                 }
                 .mr-9{
                     margin-right: 9px !important;
                 }
                 .w-10rem{
                     width: 10rem;
                 }
                 .syncMileageBtn{
                     font-size: 12px !important;
                 }
                 .pull-right1{
                     float: right !important;
                 }
                /* AI-000206 - Ends*/
            </style>
            <script>
                var app = angular.module('managerDashboardModule',['ui.bootstrap','angularUtils.directives.dirPagination']);
                
                var MileagesofReimbursements = function (visible) {
                  this.visible = visible;
                };
                
                MileagesofReimbursements.prototype.open = function(name,fileName,month,selectedYear,mileageList,emailofemployee) {
                 
                    this.fileName = fileName;
                    this.visible = true;
                    this.name= name;
                    this.mileageList = mileageList;
                    this.clickedMonth = month;
                    this.clickedYear = selectedYear;
                    this.emailofemployee = emailofemployee;
                };

                MileagesofReimbursements.prototype.close = function() {
                  this.visible = false;
                };
                
                app.directive('reimbursementsDialogDirective', [ '$filter',
                    function($filter) {
                        return {
                            restrict: 'E',
                            scope: {
                                model: '=',
                                data: "&exportData",
                                someCtrlFn: '&callbackFn',
                                modalformsg: '&modalOpen'
                            },
                            link: function(scope, element, attributes) {
                                scope.$watch('model.visible', function(newValue) {
                                    var modalElement = element.find('.modal');
                                    modalElement.modal(newValue ? 'show' : 'hide');
                                    if(newValue == true){
                                        scope.callfn('');
                                    }
                                    else {
                                        scope.IsAllChecked = false;
                                        scope.IsAllCheckedFlag = false;
                                        scope.checkAllShowApprove = false;
                                        scope.checkAllShowFlag = false;
                                    }
                                    angular.forEach(scope.model.mileageList, function(item) {
                                        if(item.isSelected || item.isChecked){
                                            scope.selectedmonth = scope.model.clickedMonth;
                                            scope.selectedyear   = scope.model.clickedYear;
                                            scope.selecteddid = item.driverid;
                                        }
                                    });
                                });
                              
                                scope.totalMileage = 0;
                                scope.totalVariableAmount = 0;
                                scope.showmanagermodalsearchbar = false;
                                scope.selecteddid = '';
                                scope.displayBtn = false;
                                scope.IsAllChecked = false;
                                scope.IsAllCheckedFlag = false;                                
                                scope.checkAllShowApprove = false;
                                scope.checkAllShowFlag = false;
                                scope.selectedmileageidlist = [];
                                scope.selectedrejectedmileageidlist = [];

                                scope.showData=[];
                                scope.total = 0 ;
                                scope.totalvariablerate = 0 ;
                                scope.currentPage=1;
                                scope.lastIndex=0;
                                scope.totalRecords;
                                scope.reverse = false;
                                scope.maxPage = 0;
                                scope.search="";
                                scope.itemPerPage = 8;
                                scope.searchedArray = [];
                          
                            scope.init = function () {
                                scope.showData = [];
                                scope.total = 0.0;
                                scope.totalvariablerate = 0.0;
                                scope.maxPage = 0;
                                scope.totalRecords = scope.model.mileageList.length;
                                scope.model.mileageList
                               
                                let tl = 0;
                                let tv = 0;
                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                scope.totalRecords
                                for (var i = 0; i < scope.itemPerPage; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                 
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }
                            scope.next = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                var count = 0;
                                let tl = 0;
                                let tv = 0;
                               
                                for (var i = scope.lastIndex; i < lstInd + scope.itemPerPage; i++) {
                                  let isSearch = scope.searchedArray.length>0?true:false
                                    if(isSearch){
                                        if (scope.searchedArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                        tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                        scope.showData.push(scope.searchedArray[i])
                                        }
                                    }else{
                                        if(scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    //scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }
                                
                                //AI-000427 --> Starts

                                angular.forEach(scope.showData, function(item) {
                                        if(item.isSelected || item.isChecked){  
                                            count++;
                                        }
                                });

                                if(count == 0){
                                         scope.displayBtn = false;   
                                }
                                else{
                                         scope.displayBtn = true;
                                }

                                 //AI-000427 --> Ends
                                
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage++;
                            }
                            scope.previous = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                             
                                let tl = 0;
                                let tv = 0;
                                var lstInd = scope.lastIndex;
                                var count = 0;
                                for (var i = scope.lastIndex - (scope.itemPerPage*2); i < lstInd - scope.itemPerPage; i++) {
                                 let isSearch = scope.searchedArray.length>0?true:false
                                    if(isSearch){
                                        if (scope.searchedArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                        tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                        scope.showData.push(scope.searchedArray[i])
                                        }
                                    }else{
                                        if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    }
                                    //scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }

                                 //AI-000427 --> Starts
                                
                                angular.forEach(scope.showData, function(item) {
                                        if(item.isSelected || item.isChecked){  
                                            count++;
                                        }
                                });

                               
    
                                if(count == 0){
                                         scope.displayBtn = false;   
                                }
                                else{
                                         scope.displayBtn = true;
                                }

                                 //AI-000427 --> Ends
                                
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage--;
                            }
                                
                               
                                scope.sortKey = 'tripdate';   
                                scope.sort = function (keyName) {
                                //$scope.reverse = !$scope.reverse;
                                    scope.reverse = (scope.sortKey === keyName) ? !scope.reverse : false;
                                    scope.sortKey = keyName;
                                    
                                    if (keyName === 'mileage' || keyName === 'variableamount') {
                                        
                                       scope.model.mileageList.sort(function (a, b) {
                                            var nameA = parseInt(a[keyName]),
                                                nameB = parseInt(b[keyName]);
                                                
                                            if (scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return valuscope.model.mileageList=e (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    if (keyName === 'origin' || keyName === 'destination') {
                                       scope.model.mileageList.sort(function (a, b) {
                                            var nameA = a[keyName].toLowerCase(),
                                                nameB = b[keyName].toLowerCase()
                                            if (scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    if (keyName === 'tripdate' || keyName === 'submitteddate') {
                                       scope.model.mileageList.sort(function (a, b) {
                                            var dateA = new Date(a[keyName].toLowerCase()),
                                                dateB = new Date(b[keyName].toLowerCase())
                                            if (scope.reverse) {
                                                if (dateA < dateB) //sort string ascending
                                                    return -1
                                                if (dateA > dateB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (dateA < dateB) //sort string ascending
                                                    return 1
                                                if (dateA > dateB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    scope.showData = [];
                                    scope.total = 0;
                                    scope.totalvariablerate = 0;
                                    var lstInd = scope.lastIndex;
                                    let tl = 0;
                                    let tv = 0;
                                    for (var i = scope.lastIndex - scope.itemPerPage; i < lstInd; i++) {
                                        
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseInt(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseInt(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                        
                                        scope.lastIndex = i + 1;
                                    }
                                    scope.total = tl.toFixed(2);
                                    scope.totalvariablerate = tv.toFixed(2);
                                }

                                scope.callfn = function(flagstatus){    
                                    scope.init();
                                    scope.totalMileage = 0;
                                    scope.totalVariableAmount = 0;
                                    scope.model.mileageList
                                    
                                    let approvedcount = 0,flagcount = 0,approvedchkcount = 0;
                                    let countapprovemil = 0;
                                    if(scope.model.mileageList.length == 0) {
                                        scope.checkAllShowApprove = false;
                                        scope.checkAllShowFlag = false;
                                        scope.displayBtn = false; 
                                        scope.displayDownloadBtn = false;
                                    }
                                    
                                    if(scope.showData.length > 0){
                                        if(scope.model.mileageList.length > 8)
                                            scope.showmanagermodalsearchbar = true;        
                                        else
                                            scope.showmanagermodalsearchbar = false;

                                        scope.displayDownloadBtn = true;
                                        scope.totalMileage = 0;
                                        scope.totalVariableAmount = 0
                                        let tv = 0;
                                        let tm = 0;
                                        angular.forEach(scope.model.mileageList, function(item) {
                                            /*scope.totalMileage = scope.totalMileage + parseInt(item.mileage);
                                            scope.totalVariableAmount = scope.totalVariableAmount + parseInt(item.variableamount);*/
                                            tm = tm + parseFloat(item.mileage);
                                            scope.totalMileage = tm.toFixed(2);
                                            tv = tv + parseFloat(item.variableamount);
                                            scope.totalVariableAmount = tv.toFixed(2);
                                            if((item.status != 'None' && item.status != '') && item.mileage > 0) {
                                                approvedchkcount++;
                                                scope.checkAllShowApprove = true;
                                                scope.checkAllShowFlag = true;

                                                if(item.isSelected){   
                                                    approvedcount++;
                                                } else if(item.isChecked){
                                                    flagcount++;
                                                }
                                            }
                                            if(item.status == 'Approved')
                                            {
                                                countapprovemil++;
                                            }
                                        });
                                        
                                        if((scope.model.mileageList.length - countapprovemil ) > 0){
                                            
                                            scope.checkAllShowApprove = true;
                                        }
                                        else if((scope.model.mileageList.length - countapprovemil ) == 0) {
                                            
                                            scope.checkAllShowApprove = false;
                                        }

                                        if(approvedchkcount == 0 && approvedcount == 0){
                                            scope.checkAllShowApprove = false;
                                        }
                                        else
                                        {
                                            if(approvedchkcount == approvedcount){
                                                scope.IsAllChecked = true;
                                                scope.IsAllCheckedFlag = false;
                                            }   
                                            
                                        }

                                        if(approvedchkcount == 0 && flagcount == 0){
                                            scope.checkAllShowFlag = false;
                                        }
                                        else
                                        {
                                            if(approvedchkcount == flagcount){
                                                scope.IsAllCheckedFlag = true;
                                                scope.IsAllChecked = false;
                                            } 
                                        }
                                        scope.displayBtn = false; 
                                        if(flagcount == 0 && approvedcount == 0)
                                            scope.displayBtn = false; 
                                        else{
                                            scope.displayBtn = true; 
                                        }
                                    }
                                    var checktrues = $filter("filter")(scope.model.mileageList , {isChecked:true} );
                                    var selectedtrues = $filter("filter")(scope.model.mileageList , {isChecked:true} );
                                    if(checktrues.length > 0 || selectedtrues.lenght > 0)
                                        scope.displayBtn = true;   
                                    else
                                        scope.displayBtn = false;
                                    if(flagstatus != '')
                                    {
                                        scope.modalformsg({status:flagstatus});
                                    }
                                    
                                }
                                
                                scope.CheckUncheckAll = function() {
                                    if(scope.IsAllChecked == true)
                                        scope.displayBtn = true;
                                    else
                                        scope.displayBtn = false;

                                    scope.countMileag = 0;
                                    scope.showData = [];
                                    scope.selectedmileageidlist = [];
                                    angular.forEach(scope.model.mileageList, function(item) {
                                        item.isSelected = scope.IsAllChecked;
                                        scope.countMileag = scope.countMileag + parseInt(item.mileage);
                                        scope.selectedmileageidlist.push(item.id);
                                        if(item.isChecked){
                                            item.isChecked = !item.isChecked;
                                            if(scope.IsAllCheckedFlag){
                                                scope.IsAllCheckedFlag = false;
                                            }
                                        }
                                    });
                                    for(var i = 0;i<scope.itemPerPage;i++){
                                        scope.currentPage=1;
                                        if(scope.model.mileageList[i]){
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                        scope.lastIndex=i+1;
                                    }
                                };

                                scope.CheckUncheckHeader = function() {
                                    scope.selectedmonth = '';
                                    scope.selecteddid = '';
                                    scope.selectedyear = '';
                                    scope.selectedmileageidlist = [];
                                    scope.countMileag = 0;
                                    //var total = $('.myteamcheck').length;
                                    var total = scope.model.mileageList.length;
                                    var count = 0;
                                    
                                    angular.forEach(scope.showData, function(item) {
                                        if(item.isSelected){  
                                            count++;
                                            scope.countMileag = scope.countMileag + parseInt(item.mileage);
                                            scope.selectedmileageidlist.push(item.id);
                                            scope.selectedmonth = scope.model.clickedMonth;
                                            scope.selectedyear = scope.model.clickedYear;
                                            scope.selecteddid = item.driverid;
                                            if(item.isChecked){
                                                item.isChecked = !item.isChecked;
                                            }
                                        }
                                    });
                                    if(total == count && (total != 0 && count !=0 ))
                                    {
                                        scope.model.mileageList = scope.showData
                                        scope.IsAllChecked = true;
                                        scope.IsAllCheckedFlag = false;
                                    }
                                    else{
                                        scope.IsAllChecked = false;
                                        scope.IsAllCheckedFlag = false;
                                    }
                                    var trues = $filter("filter")(scope.model.mileageList , {isChecked:true} );
                                    scope.chkselectcount = trues.length;
                                   
                                     if(count == 0 && scope.chkselectcount == 0)
                                         scope.displayBtn = false;   
                                    else
                                         scope.displayBtn = true;
                                };

                                scope.CheckUncheckAllForFlag = function() {
                                    scope.selectedrejectedmileageidlist = [];
                                    scope.showData = [];
                                    if(scope.IsAllCheckedFlag == true)
                                        scope.displayBtn = true;
                                    else
                                        scope.displayBtn = false;

                                    angular.forEach(scope.model.mileageList, function(item) {
                                        item.isChecked = scope.IsAllCheckedFlag;
                                        scope.selectedrejectedmileageidlist.push(item.id);
                                        if(item.isSelected){
                                            item.isSelected = !item.isSelected;
                                            if(scope.IsAllChecked){
                                                scope.IsAllChecked = false;
                                            }
                                        }
                                    });
                                    for(var i = 0;i<scope.itemPerPage;i++){
                                        scope.currentPage=1;
                                        if(scope.model.mileageList[i]){
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                        scope.lastIndex=i+1;
                                    }
                                };

                                scope.CheckUncheckHeaderForFlag = function(index) {
                                    
                                    scope.selectedmonth = '';
                                    scope.selecteddid = '';
                                    scope.selectedyear = '';
                                    scope.selectedrejectedmileageidlist = [];
                                    //var total = $('.flagcheck').length;
                                    var total = scope.model.mileageList.length;
                                    var count = 0;
                                    
                                    angular.forEach(scope.showData, function(item) {
                                        
                                        if(item.isChecked){
                                            
                                            count++;
                                           // scope.displayBtn = true;
                                            scope.selectedrejectedmileageidlist.push(item.mileage);
                                            scope.selectedmonth = scope.model.clickedMonth;
                                            scope.selectedyear = scope.model.clickedYear;
                                            scope.selecteddid = item.driverid;
                                            if(item.isSelected){
                                                item.isSelected = !item.isSelected;
                                            }
                                        }
                                       
                                    });
                                    if(total == count && (total != 0 && count !=0 )){
                                        scope.model.mileageList = scope.showData
                                        scope.IsAllCheckedFlag = true;
                                        scope.IsAllChecked = false;
                                    }
                                    else{
                                        scope.IsAllCheckedFlag = false;
                                        scope.IsAllChecked = false;
                                    }
                                    
                                    var trues = $filter("filter")(scope.model.mileageList , {isSelected:true} );
                                    scope.chkselectcount = trues.length;
                                    
                                    if(count == 0 && scope.chkselectcount == 0)
                                        scope.displayBtn = false;   
                                    else
                                        scope.displayBtn = true;
                                };
                                scope.refreshpage = function(mileages){
                                    scope.someCtrlFn({updatedmileagelist:mileages});
                                }

                                scope.updatePagination=function()
                                 {
                                        if(scope.search.length>0){
                                        scope.itemPerPage = 8;
                                        var filteredArray = scope.model.mileageList.filter(function(number) {
                                            if(number.origin != '' && number.origin != null && number.origin != undefined && number.destination != '' && number.destination != null && number.destination != undefined){
                                             
                                             return number.origin.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1||number.destination.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1;
                                          }
                                          return number.origin,number.destination;
                                         });
                                        
                                        scope.searchedArray = filteredArray;
                                        scope.showData = [];
                                        scope.total = 0.0;
                                        scope.totalvariablerate = 0.0;
                                        scope.maxPage = 0;
                                        scope.totalRecords = filteredArray.length;
                                        
                                        let tl = 0;
                                        let tv = 0;
                                        scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                        scope.totalRecords
                                        for (var i = 0; i < scope.itemPerPage; i++) {
                                        scope.currentPage = 1;
                                        if (filteredArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                        tl = tl + parseFloat(filteredArray[i].mileage);
                                        tv = tv + parseFloat(filteredArray[i].variableamount);
                                        /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        scope.showData.push(filteredArray[i])
                                        }
                                        scope.lastIndex = i + 1;
                                        }
                                        if(scope.showData.length == 0){
                                            scope.displayDownloadBtn = false;
                                        }
                                        else{
                                            scope.displayDownloadBtn = true;
                                        }
                                        scope.total = tl.toFixed(2);
                                        scope.totalvariablerate = tv.toFixed(2);
                                        
                                        
                                        }else{
                                        scope.itemPerPage = 8;
                                        scope.init();
                                        scope.searchedArray.length = 0;
                                        scope.displayDownloadBtn = true;
                                        }
                                        
                                        
                                 }
                                element.on('shown.bs.modal', function() {
                                    scope.$apply(function() {
                                        scope.model.visible = true; 
                                        scope.sort("tripdate");
                                    });
                                });
                                element.on('hidden.bs.modal', function() {
                                    scope.$apply(function() {
                                        scope.model.visible = false;
                                        scope.search="";
                                        scope.searchedArray.length = 0;
                                       
                                    });
                                });

                                $('input[type=search]').on('search', function () {
                                    scope.search="";
                                    scope.searchedArray.length = 0;
                                });
                                
                                scope.onClick = function() {
                                    $('#spinner').show();
                                    scope.updateformileagelist = [];
                                    
                                    var arr = [];
                                    if(scope.IsAllChecked || scope.IsAllCheckedFlag ){
                                        arr = scope.model.mileageList;
                                    }else{
                                        arr = scope.showData;
                                    }
                                    
                                    angular.forEach(arr, function(item) {
                                        if(item.isChecked == true || item.isSelected == true) {
                                            
                                            scope.updateformileagelist.push(item);
                                        }
                                    });
                                    var truecheck = $filter("filter")(arr , {isChecked:true} );
                                    scope.chkcount = truecheck.length;
                                    var trueselect = $filter("filter")(arr , {isSelected:true} );
                                    scope.selectcount = trueselect.length;
                                    Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.DriverManagerDriverDetailsController.approveMileages}',JSON.stringify(truecheck),JSON.stringify(trueselect),scope.model.name,scope.model.emailofemployee,
                                    function(result, event) {
                                        if(event.status && result == 'success'){
                                            /*let resultArray = result;
                                            
                                            scope.model.mileageList = JSON.parse(resultArray);
                                            */
                                            var tempArray = JSON.parse(JSON.stringify(scope.model.mileageList));
                                            tempArray.forEach(function(item) {
                                                
                                                scope.updateformileagelist.forEach(function(ui) {
                                                    if(item.id == ui.id) {
                                                        
                                                        if((item.isChecked != ui.isChecked) || ui.isChecked == true)
                                                        {
                                                            if(ui.isChecked){
                                                                item.status = 'Rejected'
                                                                item.approveddate = '';
                                                                item.isChecked = true;
                                                                item.isSelected = false;
                                                            }
                                                        }
                                                        if((item.isSelected != ui.isSelected) || (item.isSelected == true && ui.isSelected == true)) {
                                                            if(ui.isSelected){
                                                                
                                                                item.isChecked = false;
                                                                item.isSelected = true;
                                                                item.status = 'Approved'
                                                                var dt = $filter('date')(new Date(), "MM/dd/yy");
                                                                item.approveddate = dt;
                                                            }
                                                        }
                                                    }
                                                })
                                            })
                                            scope.model.mileageList = JSON.parse(JSON.stringify(tempArray));
                                            scope.model.mileageList
                                            if(scope.selectedmileageidlist.length == 0 && scope.selectedrejectedmileageidlist.length == 0) {
                                                
                                                $('#spinner').hide();
                                                toastr.success('This Mileage has already flagged.');
                                            }
                                            var flagstatus = '';
                                            if(scope.selectcount > 0 && scope.selectedmileageidlist.length > 0){
                                                flagstatus = flagstatus+'approved'; /* AI-000425 */
                                                scope.refreshpage(scope.model.mileageList);
                                                scope.selectedmileageidlist = [];
                                            }
                                            if(scope.chkcount > 0 && scope.selectedrejectedmileageidlist.length > 0)
                                            {
                                                flagstatus = flagstatus+'Rejected';
                                                scope.refreshpage(scope.model.mileageList);
                                                scope.selectedrejectedmileageidlist = [];
                                            }
                                            scope.callfn(flagstatus);
                                        }
                                        else
                                        {
                                            $('#spinner').hide();
                                            toastr.error('Something went wrong');
                                        }
                                        scope.$apply();
                                    },{escape: false});
                                    
                                };
                            },
                            template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog"aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4 ng-model="month">{{model.clickedMonth}}</h4><div class="modal-divider"></div><div class="table-responsive"><div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="showmanagermodalsearchbar"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><thead><tr><th ng-click="sort(\'tripdate\')">Trip Date<span ng-show="sortKey == \'tripdate\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}"></span></th><th ng-click="sort(\'origin\')">Origin<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'origin\'"></span></th><th ng-click="sort(\'destination\')">Dest.<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'destination\'"></span></th><th ng-click="sort(\'submitteddate\')">Submitted<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'submitteddate\'"></span></th><th ng-click="sort(\'approveddate\')">Approved<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'approveddate\'"></span></th><th ng-click="sort(\'mileage\')">Mileage<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'mileage\'"></span></th><th ng-click="sort(\'variableamount\')">Variable Amount<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'variableamount\'"></span></th><th><button class="btn btn-primary pull-right1">Approve <input type="checkbox" ng-click="CheckUncheckAll()" ng-model="IsAllChecked" ng-show="checkAllShowApprove"/></button></th><th><button class="btn btn-third pull-right1">Flag </span><input type="checkbox" ng-show="checkAllShowFlag" ng-click="CheckUncheckAllForFlag()" ng-model="IsAllCheckedFlag"></button></th></tr></thead><tbody class="table-a-link"><tr ng-repeat="mil in showData |filter:search" current-page:"currentPage"><td ng-model="mil.tripdate">{{ mil.tripdate}}</td><td ng-model="mil.origin">{{ mil.origin}}</td><td ng-model="mil.destination">{{ mil.destination }}</td><td ng-model="mil.submitteddate">{{ mil.submitteddate }}</td><td ng-model="mil.approveddate">{{mil.approveddate }}</td><td ng-model="mil.mileage">{{ mil.mileage }}</td><td ng-model="mil.variableamount" id="modalvariableid">${{ mil.variableamount }}</td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.status !=\'Approved\' && mil.mileage > \'0\'"></div><div class="pull-right1 mr-9" ng-if="mil.status !=\'Approved\' && mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isSelected" class="myteamcheck" ng-click="CheckUncheckHeader();"></div></td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.mileage > \'0\'"></div><div class="pull-right1 mr-9" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isChecked"  class="flagcheck" ng-click="CheckUncheckHeaderForFlag();"></div></td></tr></tr><tr ng-if="showData.length == 0"><td colspan="9" class="table-nodata">No Mileage Available</td></tr></tbody><tfoot ng-if="displayDownloadBtn"><tr><th scope="row">Total</th><th colspan="4"> </th><th>{{total | number:2}} / {{totalMileage | number:2}}</th><th>${{totalvariablerate}} / ${{totalVariableAmount}}</th><th colspan="2"></th></tr></tfoot></table></div></div><div class="modal-footer"><div class="col-md-6" ng-if="displayDownloadBtn">Page {{currentPage}} of {{maxPage}} </div><div class="col-md-6"><ul ng-if="displayDownloadBtn" class="pagination float-right paginationformodal"><li class="page-item "  ng-class="{\'disable-pagination\':currentPage === 1}"><a class="page-link" ng-click="previous()">Previous</a></li><li class="page-item"><a class="page-link" >{{currentPage}}</a></li><li class="page-item"  ng-class="{\'disable-pagination\':currentPage === maxPage}"><a class="page-link" ng-click="next()"   href="#">Next</a></li></ul><div class="paginationformodaldownloadbutton"><div excel-export="true" export-data="data()" ng-show="displayDownloadBtn" file-name="{{model.fileName}}"/><button class="btn btn-secondary float-right" ng-click="onClick();" ng-show="displayBtn">Submit</button></div></div></div></div></div><div>'
                        };
                    }
                ]);


                app.directive('excelExport',function () {
                    return {
                        restrict: 'A',
                        scope: {
                            fileName: "@",
                            data: "&exportData"
                        },
                        replace: true,
                        template: '<button class="btn btn-primary float-right mr-11" ng-click="download()">Download <i class="fa fa-download"></i></button>',
                        link: function (scope, element) {
                            
                            scope.download = function() {

                                function datenum(v, date1904) {
                                    if(date1904) v+=1462;
                                    var epoch = Date.parse(v);
                                    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                                };
                                
                                function getSheet(data, opts) {
                                    var ws = {};
                                    var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
                                    for(var R = 0; R != data.length; ++R) {
                                        for(var C = 0; C != data[R].length; ++C) {
                                            if(range.s.r > R) range.s.r = R;
                                            if(range.s.c > C) range.s.c = C;
                                            if(range.e.r < R) range.e.r = R;
                                            if(range.e.c < C) range.e.c = C;
                                            var cell = {v: data[R][C] };
                                            if(cell.v == null) continue;
                                            var cell_ref = XLSX.utils.encode_cell({c:C,r:R});
                                            
                                            if(typeof cell.v === 'number') cell.t = 'n';
                                            else if(typeof cell.v === 'boolean') cell.t = 'b';
                                            else if(cell.v instanceof Date) {
                                                cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                                cell.v = datenum(cell.v);
                                            }
                                            else cell.t = 's';
                                            
                                            ws[cell_ref] = cell;
                                        }
                                    }
                                    if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                    return ws;
                                };
                                
                                function Workbook() {
                                    if(!(this instanceof Workbook)) return new Workbook();
                                    this.SheetNames = [];
                                    this.Sheets = {};
                                }
                                 
                                var wb = new Workbook(), ws = getSheet(scope.data());
                                /* add worksheet to workbook */
                                wb.SheetNames.push(scope.fileName);
                                wb.Sheets[scope.fileName] = ws;
                                var wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'binary'});

                                function s2ab(s) {
                                    var buf = new ArrayBuffer(s.length);
                                    var view = new Uint8Array(buf);
                                    for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                    return buf;
                                }
                                
                                saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), scope.fileName+'.xlsx');
                                
                            };
                        }
                    };
                });

                app.controller('managerDashboardController', ['$scope','$filter','$modal',
                    function($scope,$filter,$modal) {
                        
                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        
                        $scope.accid = url.searchParams.get("accid");
                        $scope.id = url.searchParams.get("id");
                        $scope.manid = url.searchParams.get("manid");
                        $scope.showteam = url.searchParams.get("showteam");
                        $scope.syncMileageLabel = '{!($Label.unapproveMileageMessage)}';
                        $scope.years = {!Last2Years};
                        $scope.years.sort(function(a,b){
                            var numA = parseInt(a),
                                numB = parseInt(b);

                                if (numA < numB){ 
                                    return 1;
                                }else if (numA > numB){
                                    return -1;
                                 }else{
                                     return 0; //default return value (no sorting)
                                 }
                        })
                        $scope.lastYear = _.first($scope.years);
                        $scope.reimbursementDialog = new MileagesofReimbursements(false);
                        $scope.search = ";"
                        $scope.IsAllChecked = false;
                        $scope.displayTeamRecordBtn = false;
                        $scope.emailofemployee = '{!emailofEmployee}';
                        $('#spinner').hide();
                        $scope.tabs = [{active: true}, {active: false}, {active: false},{active: false}];
                        $scope.packetandMeeting = function() {
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getPacketandMeeting}',$scope.id,
                                function(result, event) {
                                    if(event.status && result != null && result != '') {
                                        $scope.pacektstatus = [];
                                        $scope.pacektstatus = JSON.parse(result);
                                        $scope.pacekt = $scope.pacektstatus[0].Packet__c;
                                        $scope.meeting = $scope.pacektstatus[0].Meeting__c;
                                        if($scope.pacekt == 'Being Generated'){
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass("btn.btn-secondary.pull-right");
                                        }
                                        else if($scope.pacekt == 'Sent for Signature')
                                        {
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("btn.btn-secondary.pull-right");

                                        }
                                        else if($scope.pacekt == 'Waiting for Signature')
                                        {
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            
                                        }
                                        else if($scope.pacekt == 'Complete')
                                        {
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).addClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("btn-secondary");
                                        }
                                        else{
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#waitingforsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completesignature")).addClass("blank-stepper");
                                        }

                                        if($scope.meeting == 'Scheduled'){
                                            angular.element(document.querySelector("#scheduledsignature")).addClass(" active");
                                            angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                            angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Sent'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                            angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Completed'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completedsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed"); //mobio
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank"); //mobio
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Did Not Attend'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).addClass("sent");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");//mobio:to hide Completed div
                                            angular.element(document.querySelector("#span-didnotattend")).addClass("span-did-not-attend");//mobio:to color specific span red
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend");//mobio:to make "Did Not Attended" colored red
                                        }else{
                                             angular.element(document.querySelector("#scheduledsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#sentsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completedsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed"); 
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend");//mobio
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank");
                                        }
                                    }
                                },{escape: false}
                            );
                        }
                        $scope.packetandMeeting();
                        $scope.approveFunction = function(){
                            var count = 0;
                            $scope.checkAllShowForMyTeam = false;
                            angular.forEach($scope.mileages, function (item, key) {
                                if(item.totalReimbursements > '0.00' && item.status != 'Approved'){
                                    count++;
                                }
                            });
                            if(count > 0){
                                $scope.checkAllShowForMyTeam = true;
                            }
                            
                        }

                        $scope.myTeamCheckUncheckAll = function () {
                            if($scope.IsAllChecked == true)
                                $scope.displayTeamRecordBtn = true;
                            else
                                $scope.displayTeamRecordBtn = false;
                            
                            angular.forEach($scope.mileages, function(item) {
                                item.isSelected = $scope.IsAllChecked;
                            });
                        }
                        
                        $scope.CheckUncheckHeader = function(status) {
                            var total = $('.approveChk').length;
                            var count = 0;
                            angular.forEach($scope.mileages, function (item) {
                                if(item.isSelected){
                                    count++;
                                }
                            });
                            if(total == count)
                                $scope.IsAllChecked = true;
                            else
                                $scope.IsAllChecked = false;
                            
                            if(count > 0)
                                $scope.displayTeamRecordBtn = true;   
                            else
                                $scope.displayTeamRecordBtn = false;
                        }
                        $scope.approveReimbursementsofManager = function() {
                            $scope.reimbursements = [];
                            for(var i=0;i<$scope.mileages.length; i++) {
                                if($scope.mileages[i].isSelected == true) {
                                    $scope.reimbursements.push($scope.mileages[i]);
                                }
                            }
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.approveReimbursements}',$scope.selectedYear,$scope.id,$scope.accid,JSON.stringify($scope.reimbursements),
                                function(result, event) {
                                    if(event.status && result != null) { 
                                        $scope.mileages = JSON.parse(result); 
                                        $scope.approveFunction();
                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getReimbursementsListClone}',$scope.id,
                                        function(result, event) {
                                            if(event.status && result != null) 
                                            {
                                                var rs = JSON.parse(result);
                                                $scope.fetchEmpReimList(rs);
                                            }
                                        },{escape: false} );
                                    }
                                    $scope.$apply();
                                },
                                {escape: false}
                            );
                        };

                        $scope.fetchEmpReimList = function(result) {
                            $scope.empReimList = result;
                            $scope.unapprovemileage = 0;
                            if($scope.empReimList == 0){
                                $scope.showunapprove = false;
                                $scope.unapprovemileage = 0;
                                $scope.showunapprove = true;
                            
                            }
                            else{
                                var count = 0;    
                                $scope.showunapprove = false;
                                angular.forEach($scope.empReimList, function (item, key) {
                                    count = count + item.Total_Pending__c;
                                });
                                $scope.unapprovemileage = count;
                                $scope.showunapprove = true;
                            }
                            $scope.unapprovemileage
                            
                        }
                        $scope.refreshpage = function(updatedmileagelist) {
                            $scope.mileages = [];
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getAllReimbursements}',$scope.selectedYear,$scope.id,$scope.accid,
                                function(result, event) {
                                    if(event.status && result != null){
                                        if(result != '') {
                                            $scope.mileages = [];
                                            $scope.mileages = JSON.parse(result);     
                                        }
                                        else
                                        {
                                            $scope.mileages = [];                                        
                                        }
                                        $('#spinner').hide();
                                        
                                        $scope.approveFunction();
                                    }
                                    else
                                    {
                                        $('#spinner').hide();
                                        toastr.error('Something went wrong');
                                    }
                                    $scope.$apply();
                                },
                                {escape: false}
                            );
                            $scope.exportReimList = []
                            
                            $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style"]);
                            angular.forEach(updatedmileagelist, function (item, key) {
                                $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle]);
                            });
                        }

                        $scope.modalshowforapproved = function(status) {
                            $('#spinner').hide();
                            $scope.flagstatus;
                            if(status == 'Approved')
                                $scope.flagstatus = 'Approved';
                            if(status == 'Rejected')
                                $scope.flagstatus = 'Rejected';
                            if(status == 'ApprovedRejected')
                                $scope.flagstatus = 'Approved and Rejected';
                            $scope.flagstatus
                            
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getReimbursementsListClone}',$scope.id,
                                    function(result, event) {
                                        if(event.status && result != null) 
                                        {
                                            var rs = JSON.parse(result);
                                            $scope.fetchEmpReimList(rs);
                                        }
                                    },{escape: false}
                                );

                            $scope.$modalInstance = $modal.open({
                                template:'<button type="button" ng-click="cancel()" class="childcls close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Employee mileage has been {{flagstatus }}.</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                                scope: $scope
                            });
                        }
                        $scope.ok = function () {
                            $scope.$modalInstance.close();
                        };
                        $scope.cancel = function () {
                            $scope.$modalInstance.dismiss('cancel');
                        };
                        $scope.openmodal = function(clickedMonth) {
                            $scope.clickedMonth = clickedMonth;
                            $scope.emailofemployee = '{!emailofEmployee}'; 
                            $scope.nameofEmployee = '{!nameofEmployee}'; 
                            
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.DriverManagerDriverDetailsController.getMileages}',$scope.clickedMonth,$scope.selectedYear,$scope.id,
                                function(result, event) {
                                    if(event.status && result != null) 
                                    {
                                        if(result == '') 
                                        {
                                            var mileageList = [];
                                            $scope.exportReimList = [];
                                            $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                            angular.forEach(mileageList, function (item, key) {
                                                $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                            });

                                            $scope.fileName = $scope.adminname +'\'s Mileage Details '+$scope.FromDate;
                                            $scope.reimbursementDialog.open($scope.nameofEmployee,$scope.fileName,clickedMonth,$scope.selectedYear,mileageList,$scope.emailofemployee);
                                        }
                                        else
                                        {
                                            var resultdata = result.replace(/\\/g,'');
                                            var mileageList = JSON.parse(resultdata);
                                            $scope.exportReimList = [];
                                            $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                            angular.forEach(mileageList, function (item, key) {
                                                $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                            });

                                            $scope.fileName = $scope.adminname +'\'s Mileage Details '+$scope.FromDate;
                                            $scope.reimbursementDialog.open($scope.nameofEmployee,$scope.fileName,clickedMonth,$scope.selectedYear,mileageList,$scope.emailofemployee);
                                        }
                                        
                                    }
                                },
                                {escape: false}
                            );
                        };

                        $scope.empContact = {!obj_current_contact_details};
                        if($scope.empContact[0].Car_Image__c == null || $scope.empContact[0].Car_Image__c == '' || $scope.empContact[0].Car_Image__c == undefined)
                        {
                            $scope.empContact[0].Car_Image__c = '';
                        }
                        if($scope.empContact[0].Account.Logo_Document_Id__c == null || $scope.empContact[0].Account.Logo_Document_Id__c == '' || $scope.empContact[0].Account.Logo_Document_Id__c == undefined){
                            $scope.empContact[0].Account.Logo_Document_Id__c = '';
                        }
                        if($scope.empContact != null && $scope.empContact != '') {
                            $scope.adminname = $scope.empContact[0].Name;
                        } else {
                            $scope.adminname = '';
                        }

                        /*$scope.adminname = $scope.empContact[0].Name;*/
                        $scope.gaspricedata = {!gaspriceforpreviosmonth};
                        if($scope.gaspricedata != null && $scope.gaspricedata != '') {
                            if($scope.gaspricedata[0].Fuel_Price__c != '' && $scope.gaspricedata[0].Fuel_Price__c != null)
                            {
                                $scope.fuelprice = JSON.stringify($scope.gaspricedata[0].Fuel_Price__c);    
                            } else {
                                $scope.fuelprice = '';
                            }
                        } else {
                            $scope.fuelprice = '';
                        }
                        
                        
                        $scope.empReimList = JSON.parse('{!ReimbursementsList}');
                        
                        $scope.showunapprove = false;
                        if($scope.empReimList == 0){
                            $scope.unapprovemileage = JSON.stringify($scope.empReimList);
                            $scope.showunapprove = true;
                        }
                        else{
                            var count = 0;
                            angular.forEach($scope.empReimList, function (item, key) {
                                count = count + item.Total_Pending__c;
                            });
                            $scope.unapprovemileage = count;
                            $scope.showunapprove = true;    
                        }
                        $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                        //$scope.empReimList = JSON.parse('{!ReimbursementsList}');
                        $scope.mileageList = '';

                        
                        $scope.selectedYear = '';
                        $scope.fetchMileage = function(clickedyear){
                            $('#spinner').show();
                            $scope.mileages = [];
                            console.log($scope.empReimList);
                            $scope.selectedYear = clickedyear;
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getAllReimbursements}',$scope.selectedYear,$scope.id,$scope.accid,
                                function(result, event) {
                                    if(event.status  && result != null){
                                        if(result != ''){
                                            $scope.mileages = [];
                                            $scope.mileages = JSON.parse(result); 
                                            
                                        }
                                        else
                                        {
                                            $scope.mileages = [];
                                        }
                                        $('#spinner').hide();
                                        $scope.approveFunction();
                                    }
                                    else
                                    {
                                        $('#spinner').hide();
                                    }
                                    $scope.$apply();
                                },
                                {escape: false}
                            );
                        }


                        $scope.syncMileages = function (month, fuel, maintainsAndTyres, empReID, mpg) {
                                $('#spinner').show();
                                $scope.getMonth = month;
                                $scope.getYear = $scope.selectedYear;
                                $scope.getFuel = fuel;
                                $scope.getmaintTyre = maintainsAndTyres;
                                $scope.empReID = empReID;
                                $scope.mpg = mpg;
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.UpdateReimbursementStatus}', $scope.empReID,
                                    function (result, event) {
                                        if (event.status) {
                                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.TripCallout}', $scope.id, $scope.getMonth, $scope.getYear, $scope.getFuel, $scope.getmaintTyre, $scope.empReID, $scope.mpg,
                                                function (result, event) {
                                                    if (event.status) {
                                                        $scope.$modalInstance = $modal.open({
                                                            template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{syncMileageLabel}}</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="okforSync()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',

                                                            scope: $scope
                                                        });
                                                        $('#spinner').hide();
                                                    }
                                                    else {
                                                        toastr.error('Something went wrong');
                                                    }
                                                }, { escape: false }
                                            );
                                        }
                                        else {
                                            toastr.error('Something went wrong');
                                        }

                                    }
                                );
                        }
                        $scope.okforSync = function () {
                                $scope.$modalInstance.close();
                                location.reload();
                        }

                        $scope.sortKey = 'intmonth';    //set the sortKey to the param passed   
                        $scope.reverse = true;
                        $scope.sort = function(keyname){
                        
                            $scope.reverse = ($scope.sortKey === keyname)? !$scope.reverse : false; 
                            $scope.sortKey = keyname; 
                        }
                        
                        $scope.sortKey1 = 'intmonth';   //set the sortKey to the param passed   
                        $scope.reverse1 = true;
                        $scope.sort1 = function(keyname){
                            $scope.reverse1 = ($scope.sortKey1 === keyname)? !$scope.reverse1 : false; 
                            $scope.sortKey1 = keyname; 
                        }
                        
                         $scope.complianceCalculation = function() {
                            $('#spinner').show();
                            $scope.detailreportfordownload = [];
                            $scope.summaryreportfordownload = [];
                            $scope.filenamefordetail = $scope.adminname + ' Annual Tax Liability Detail Report';
                            $scope.fileNameforsummary = $scope.adminname + ' Annual Tax Liability Summary Report';
                            
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DriverManagerDriverDetailsController.getCompliance}',$scope.id,
                                function(result, event) {
                                    if(event.status && result != null) {
                                    $scope.messageofcompliance = JSON.parse(result[1]);
                                        if (result.length > 2) {
                                            $scope.$apply(function () {
                                                $scope.compliancedata = JSON.parse(result[2]);
                                                $scope.detailreport = JSON.parse(result[3]);
                                                $scope.summaryreport = JSON.parse(result[4]);
                                                $scope.Reimbursements = JSON.parse(result[5]);
                                                $scope.maxallow = JSON.parse(result[6]);
                                                $scope.taxliablity = JSON.parse(result[7]);
                                            });
                                            
                                            $scope.detailreportfordownload.push(["Year", "Month", "Employee Id", "Email", "Driver Name", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                            angular.forEach($scope.detailreport, function (item) {
                                                $scope.detailreportfordownload.push([item.year, item.month, item.employeeid, item.emailid, item.drivername, "$" + item.totalreim, "$" + item.iRSallowable, "$" + item.imputedincome]);

                                            });
                                            $scope.detailreportfordownload.push([" ", " ", " ", " ", " ", "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + $scope.taxliablity]);

                                            $scope.summaryreportfordownload.push(["Employee Id", "Email", "Driver Name", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                            angular.forEach($scope.summaryreport, function (item) {
                                                $scope.summaryreportfordownload.push([item.employeeid, item.emailid, item.drivername, "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + item.imputedincome]);
                                            });
                                            $scope.$apply(function(){
                                                $scope.summrylenth = $scope.summaryreportfordownload.length
                                            });
                                            $('#spinner').hide();
                                        }
                                        else
                                        {   
                                            $scope.$apply(function(){
                                                $scope.compliancedata = [];
                                                $scope.summrylenth = 0;
                                            });
                                            $('#spinner').hide();
                                        }
                                    }
                                },
                                {escape: false}
                            );
                        }
                }]);    
            </script>
        </head>
        <body ng-app="managerDashboardModule" ng-controller="managerDashboardController" ng-cloak="true">
            <div id="spinner">
                <div class="spinner-background"></div>
                <div class="spinner-load">
                    <div class="spinner-border text-light" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <header>
                <div class="main-header sticky" id="myHeader">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                    <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" href="/app/drivermanagerdashboard?accid={{accid}}&id={{manid}}&showteam={{showteam}}">
                                        <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)" alt="logo"/>
                                    </a>
                                    <button class="navbar-toggler" type="button" data-toggle="collapse"
                                        data-target="#collapsibleNavbar">
                                        <span class="navbar-toggler-icon"><i class="fa fa-bars"></i></span>
                                    </button>
                                    <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                        id="collapsibleNavbar">
                                        <!-- <ul class="navbar-nav flex-row">
                                            
                                        </ul> -->
                                        <ul class="navbar-nav alignitemscenter flex-row">
                                            <li class="nav-item active">
                                                <a class="nav-link text-white" href="/app/drivermanagerdashboard?accid={{accid}}&id={{manid}}&showteam={{showteam}}">Dashboard</a>
                                            </li>
                                            <li class="nav-item">
                                                <a class="nav-link text-white" href="/app/drivermanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}">My Details</a>
                                            </li>
                                            <!-- <li class="nav-item">
                                                <a class="nav-link text-white" href="/app/reportlistformanager?accid={{accid}}&id={{manid}}&showteam={{showteam}}">Reports</a>
                                            </li> -->
                                            <!-- <li class="nav-item">
                                                
                                                <a data-toggle="modal" data-target="#driver-dashboard-upload-insurancebtn"
                                                    class="btn btn-secondary float-right">Upload Insurance
                                                </a>
                                            </li> -->
                                            <li class="nav-item">
                                                <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                            </li>
                                        </ul>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
            <!-- Upload Insurance button Model -->
            <div class="modal fade driver-dashboard-upload-insurancebtn" tabindex="-1" role="dialog"
                aria-labelledby="driver-dashboard-upload-insurancebtn" id="driver-dashboard-upload-insurancebtn">
                <div class="modal-dialog modal-xl modal-dialog-centered">
                    <div class="modal-content rounded-0">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <div class="modal-body">
                            <div class="container">
                                <div class="row">
                                    <div
                                        class="offset-md-3 offset-lg-3 offset-xl-3 col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 px-0">
                                        <div class="text-center my-3 my-sm-3 my-md-3 my-lg-3">
                                            <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/adminroster-importfile.png')}" class="img-fluid" alt="Admin roster import file"/>
                                            <div class=" my-3 my-sm-3 my-md-3 my-lg-3">
                                                <p class="fileupload-title">
                                                    <span class="font-weight-bold">
                                                        Important Instructions
                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                        <!--
                                        <div class="form-group inputDnD my-3 my-sm-3 my-md-3 my-lg-3">
                                            <button type="button" class="btn btn-success" onclick="document.getElementById('inputFile').click()">Add Image</button>
                                            <label class="sr-only" for="inputFile">File Upload</label>
                                            <input type="file" class="form-control-file font-weight-bold" id="inputFile" accept="image/*" onchange="readUrl(this)" data-title="Drag and drop a file">
                                        </div>
                                        -->
                                        <form method="post" action="" enctype="multipart/form-data" class="box">
                                            <div class="box__input" accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" id="box__input">
                                                <svg class="box__icon" xmlns="" width="50" height="43" viewBox="0 0 50 43">
                                                    <path
                                                        d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" />
                                                </svg>
                                                
                                                <input type="file" name="file" id="file" class="box__file" multiple="false" accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" onchange="angular.element(this).scope().file_changed(this)"/>
                                                <label for="file" class="w-100 text-center"><strong>Choose a file</strong><span
                                                        class="box__dragndrop"> or drag it here</span>.</label>
                                                <button type="submit"
                                                    class="btn btn-primary justify-content-center box__button" ng-click="uploadFile($event)" ng-show = "IsVisiblebtn" data-target="#adminrosterImportProcess" data-toggle="modal">Choose file to upload</button>
                                            </div>
                                            <div class="box__uploading w-100 text-center"><img src="animation.svg"/></div>
                                            <div class="box__success w-100 text-center">Done! </div>
                                            <div class="box__error w-100 text-center">Error! <span></span>. Try again!</div>
                                        </form>
                                        <!-- <a data-toggle="modal" data-target="#adminrosterImportProcess">
                                            File upload process
                                        </a> -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <section class="container-fluid">
                <div class="back-btn my-3 rt">
                    <a href="/app/drivermanagerdashboard?accid={{accid}}&id={{manid}}&showteam={{showteam}}"><i class="fas fa-chevron-left"></i> Back</a>
                </div>
                <c:EmployeeDetails />
                <div class="form-gray-divider"></div>
                <div class="my-5 admin-roster-tab-section">
                    <ul class="nav nav-pills">
                        <li class="nav-item mb-3">
                            <a class="nav-link active" data-toggle="pill" href="#pills-admin-dashbord-myteam">My Trips</a>
                        </li>
                        <li class="nav-item mb-3">
                            <a class="nav-link" data-toggle="pill" href="#pills-admin-dashbord-mileage">Plan Info</a>
                        </li>
                    </ul>
                    <div class="tab-content timeline">
                        <div class="tab-pane active" id="pills-admin-dashbord-myteam">
                            <div id="accordion" role="tablist">
                                <div class="card insurance-declatarion-card" ng-repeat="yr in years">
                                    <div class="card-header" role="tab" id="Cardheading">
                                        <h5 class="mb-0">
                                            <a class="collapsed" data-toggle="collapse" href="#collapseCard{{$index}}" aria-expanded="false" aria-controls="collapseCard" ng-click="fetchMileage(yr)" >
                                                {{yr}}
                                            </a>
                                        </h5>
                                    </div>
                                    <div id="collapseCard{{$index}}" class="collapse" role="tabpanel" aria-labelledby="Cardheading"
                                      data-parent="#accordion">
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table id="driver-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0"
                                                    width="100%">
                                                    <thead>
                                                        <tr>
                                                            <th ng-if="yr == lastYear"></th>
                                                            <th >Month
                                                                <span class="sort-icon pull-right" ></span> 
                                                            </th>
                                                            <th >Fuel
                                                                <span class="sort-icon pull-right" ng-show="sortKey=='Fuel'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                            </th>
                                                            <th >Mileage
                                                                <span class="sort-icon pull-right" ng-show="sortKey=='mileage'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                            </th>
                                                            <th >Fixed + Variable<br/>Reimbursement
                                                                <span class="sort-icon pull-right" ng-show="sortKey=='Reimbursements'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"> 
                                                            </span>
                                                            </th>
                                                            <th >Total Reimbursement
                                                                <span class="sort-icon pull-right" ng-show="sortKey=='totalReimbursements'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                            </th>
                                                            <th><!--  ng-click="sort('status')" -->
                                                                <button class="btn btn-primary pull-right1">Approve<!--  <input ng-show="checkAllShowForMyTeam" type="checkbox" ng-model="IsAllChecked" ng-click="myTeamCheckUncheckAll()" />  --></button><!-- <span class="sort-icon pull-right" ng-show="sortKey=='status'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span> -->
                                                            </th> 
                                                        </tr>
                                                    </thead>
                                                    <tbody class="driver-dashboard-table table-a-link">
                                                        <tr dir-paginate="ml in mileages |orderBy:sortKey:reverse |itemsPerPage:12">
                                                            <td class="w-10rem" ng-if="yr == lastYear"><button class="btn btn-primary syncMileageBtn" ng-click="syncMileages(ml.month,ml.fuel,ml.maintainsAndTyres,ml.employeeReimbursementId,ml.mpg)" ng-if="$first && yr == lastYear">Mileage Sync</button></td>
                                                            <td ng-click="openmodal(ml.month)"><a>{{ml.month}}</a></td>
                                                            <td ng-if="ml.fuel != null && ml.fuel != ''">${{ml.fuel}}</td>
                                                            <td ng-if="ml.fuel == null || ml.fuel == ''"></td>
                                                            <td>{{ml.mileage | currency:value=""}}</td>
                                                            <td>{{ml.varibleAndFixedReimbursements}}</td>
                                                            <td>${{ml.totalReimbursements}}</td>
                                                            <td >
                                                                <div class="pull-right1" ng-model="ml.status" ng-if="ml.status=='Approved' && ml.mileage > '0.00'"> {{ml.status}} on {{ml.approveddate}}
                                                                </div>
                                                                <div ng-model="ml.status" ng-if="ml.status=='Rejected' "> {{ml.status}} on {{ml.approveddate}}
                                                                </div>
                                                                <div  class="pull-right1 mr-11" ng-if="ml.status !='Approved' && ml.mileage > '0.00'">
                                                                    <input  type="checkbox" ng-model="ml.isSelected" ng-change="CheckUncheckHeader()" class="approveChkForcurrentyear" />
                                                                </div>
                                                            </td> 
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <button class="btn btn-secondary float-right" ng-show="displayTeamRecordBtn" ng-click="approveReimbursementsofManager();">Submit</button>
                                                <!-- <dir-pagination-controls max-size="5" direction-links="true" boundary-links="true" autoHide="true" responsive="true" class="pull-right"></dir-pagination-controls> -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="pills-admin-dashbord-mileage">
                            <c:PlanInfoComponent driverPacketDocCount="{!obj_driverpacket_attachementsize}"
                                                 insuranceDocCount="{!obj_attachementsize}"
                                                 driverPacketId="{!If(obj_driverpacket_attachementsize > 0, obj_driver_driverpacket[0], null)}"
                                                 insuranceId="{!If(obj_attachementsize > 0, obj_driver_insurance[0], null)}" />
                        </div>
                    </div>
                </div>
            </section>
            <reimbursements-dialog-directive model="reimbursementDialog" modal-Open="modalshowforapproved(status)" callback-Fn="refreshpage(updatedmileagelist)" export-data="exportReimList"></reimbursements-dialog-directive>
            <apex:include pageName="EMC_Common_footer"/>
        </body>
    </html>
</apex:page>