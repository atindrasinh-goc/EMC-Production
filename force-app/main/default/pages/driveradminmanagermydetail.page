<apex:page showHeader="false" title="My Reimbursement" sidebar="false" controller="drivermanagermydetailcontroller" action="{!getRedirected}">
  <!-- Begin Default Content REMOVE THIS -->
  <html lang="en">
    <head>
        <apex:include pageName="EMC_Common_Head"/>
        <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
        <script src="https://code.angularjs.org/1.4.7/angular.js"></script>
        <script src="https://gitcdn.github.io/bootstrap-toggle/2.1.0/js/bootstrap-toggle.min.js"></script>
        <script src="https://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-0.9.0.js"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
        <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.EmcCSS, 'emc-design/assets/css/CustomStyle.css')}" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />

        <!-- for excel download directive-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.1/jszip.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.1/xlsx.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
        <!-- for complete excel download directive-->
       
        
        <script>
            var app = angular.module('driveradminDashboardModule',[]);
            var MileagesofReimbursements = function (visible) {
              this.visible = visible;
            };
            
            MileagesofReimbursements.prototype.open = function(fileName,month,selectedYear,mileageList,totalMileage,totalVariableAmount) {
                this.fileName = fileName;
                this.visible = true;
                this.mileageList = mileageList;
                this.clickedMonth = month;
                this.clickedYear = selectedYear;
                this.totalMileage = totalMileage;
                this.totalVariableAmount = totalVariableAmount;
            };
            
            MileagesofReimbursements.prototype.close = function() {
              this.visible = false;
            };
            
            app.controller('driveradminmanagermydetail', ['$scope','$filter',
                    function($scope,$filter) {
                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        $scope.id = url.searchParams.get("id");
                        $scope.accid = url.searchParams.get("accid");
                        $scope.showteam = url.searchParams.get("showteam");
                        $scope.admindriver = false;
                        $scope.admindriver = url.searchParams.get("admindriver");
                        $scope.contactname ='{!contactDataAsString}';
                        if($scope.admindriver == undefined || $scope.admindriver == ''){
                            $scope.admindriver = false;
                        }
                       
                        $scope.search="";
                        $scope.years = {!Last2Years};
                      //  console.log($scope.years);
                        $scope.years.sort(function(a,b){
                            var numA = parseInt(a),
                                numB = parseInt(b);

                                if (numA < numB){ 
                                    return 1;
                                }else if (numA > numB){
                                    return -1;
                                 }else{
                                     return 0; //default return value (no sorting)
                                 }
                        })
                        $scope.reimbursementDialog = new MileagesofReimbursements(false);
                        $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                        var choosenfileType = '';
                        var chooseFileName = '';
                        $scope.driverInsurance = [];
                        
                        $('#spinner').hide();
                        $scope.tabs = [{active: true}, {active: false}, {active: false},{active: false}];
                        $scope.packetandMeeting = function() {
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.getPacketandMeeting}',$scope.id,
                                function(result, event) {
                                    if(event.status && result != null && result != '') {
                                        $scope.pacektstatus = [];
                                        $scope.pacektstatus = JSON.parse(result);
                                        $scope.pacekt = $scope.pacektstatus[0].Packet__c;
                                        $scope.meeting = $scope.pacektstatus[0].Meeting__c;
                                        if($scope.pacekt == 'Being Generated'){
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass("btn.btn-secondary.pull-right");
                                        }
                                        else if($scope.pacekt == 'Sent for Signature')
                                        {
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("btn.btn-secondary.pull-right");

                                        }
                                        else if($scope.pacekt == 'Waiting for Signature')
                                        {
                                            document.getElementById("downloadbtn").style.visibility = "hidden";
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("active");
                                            
                                        }
                                        else if($scope.pacekt == 'Complete')
                                        {
                                            angular.element(document.querySelector("#beinggenratedsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completesignature")).addClass("active");
                                            angular.element(document.querySelector("#completesignature")).removeClass("btn-secondary");
                                        }
                                        else{
                                            angular.element(document.querySelector("#beinggenratedsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#sentforsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#waitingforsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completesignature")).addClass("blank-stepper");
                                        }

                                        if($scope.meeting == 'Scheduled'){
                                            angular.element(document.querySelector("#scheduledsignature")).addClass(" active");
                                            angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                            angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Sent'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                            angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Completed'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                            angular.element(document.querySelector("#completedsignature")).addClass(" active");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed"); //mobio
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank"); //mobio
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                                        }
                                        else if($scope.meeting == 'Did Not Attend'){
                                            angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                            angular.element(document.querySelector("#sentsignature")).addClass("sent");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");//mobio:to hide Completed div
                                            angular.element(document.querySelector("#span-didnotattend")).addClass("span-did-not-attend");//mobio:to color specific span red
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend");//mobio:to make "Did Not Attended" colored red
                                        }else{
                                             angular.element(document.querySelector("#scheduledsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#sentsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completedsignature")).addClass("blank-stepper");
                                            angular.element(document.querySelector("#completedsignature")).addClass("completed"); 
                                            angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend");//mobio
                                            angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank");
                                        }
                                    }
                                },{escape: false}
                            );
                        }
                        $scope.packetandMeeting();

                        /* Toaster Option */
                        
                        this.setOptions = function() {
                            toastr.options.positionClass = "toast-bottom-right";
                            toastr.options.closeButton = true;
                            toastr.options.progressBar = true;
                        };

                        this.setOptions();
                        this.clear = function() {
                            toastr.clear();
                        };
                        /* Toaster Option Complete with clear funtion */

                        $scope.openmodal = function(clickedMonth) {
                            $scope.clickedMonth = clickedMonth; 
                         //   console.log($scope.selectedYear); 
                           //  console.log($scope.clickedMonth); 
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.drivermanagermydetailcontroller.getMileages}',$scope.clickedMonth,$scope.selectedYear,$scope.id,
                                function(result, event) {
                                   if(event.status && result != null) 
                                    {
                                        if(result != ''){
                                            var resultdata = result.replace(/\\/g,'');
                                            var mileageList = JSON.parse(resultdata[0]);
                                            $scope.totalMileage = JSON.parse(resultdata[1]);
                                            $scope.totalVariableAmount = JSON.parse(resultdata[2]);
                                            $scope.exportReimList = [];
                                            $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                            angular.forEach(mileageList, function (item, key) {
                                                $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                            });
                                            $scope.fileName = $scope.adminname +'\'s Mileages '+$scope.FromDate;
                                            $scope.reimbursementDialog.open($scope.fileName,clickedMonth,$scope.selectedYear,mileageList,$scope.totalMileage,$scope.totalVariableAmount);
                                        }
                                        else
                                        {
                                            var mileageList = [];
                                            $scope.totalMileage = 0;
                                            $scope.totalVariableAmount = 0;
                                            $scope.exportReimList = [];
                                            $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                            angular.forEach(mileageList, function (item, key) {
                                                $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                            });
                                            $scope.fileName = $scope.adminname +'\'s Mileages '+$scope.FromDate; 
                                            $scope.reimbursementDialog.open($scope.fileName,clickedMonth,$scope.selectedYear,mileageList,$scope.totalMileage,$scope.totalVariableAmount);
                                        }
                                    }
                                },
                                {escape: false}
                            );
                        };
                    
                        $scope.empContact = JSON.parse('{!DriverDetails}');
                        $scope.adminname = $scope.empContact[0].Name;
                        if($scope.empContact[0].Insurance_Attachment_Id__c != '' && $scope.empContact[0].Insurance_Attachment_Id__c != null && $scope.empContact[0].Insurance_Attachment_Id__c != undefined) {
                            $scope.attachmentid = $scope.empContact[0].Insurance_Attachment_Id__c ;
                        }
                        else
                        {
                            $scope.attachmentid = null;
                        }
                        
                        $scope.mileageList = '';
                        $scope.gaspricedata = {!gaspriceforpreviosmonth};
                        /*$scope.fuelprice = JSON.stringify($scope.gaspricedata[0].Fuel_Price__c);*/
                        if($scope.gaspricedata != null && $scope.gaspricedata != '') {
                            if($scope.gaspricedata[0].Fuel_Price__c != '' && $scope.gaspricedata[0].Fuel_Price__c != null)
                            {
                                $scope.fuelprice = JSON.stringify($scope.gaspricedata[0].Fuel_Price__c);    
                            } else {
                                $scope.fuelprice = '';
                            }
                        } else {
                            $scope.fuelprice = '';
                        }
                        $scope.empReimList = JSON.parse('{!ReimbursementsList}');
                        $scope.showunapprove = false;
                        if($scope.empReimList == 0){
                            $scope.unapprovemileage = JSON.stringify($scope.empReimList);
                            $scope.showunapprove = true;
                        }
                        else{
                            var count = 0;
                            angular.forEach($scope.empReimList, function (item, key) {
                                count = count + item.Total_Pending__c;
                            });
                            $scope.unapprovemileage = count;
                            $scope.showunapprove = true;    
                        }
                        /* For File Upload*/
                        $scope.filedata = '';
                        $scope.uploadVisible = true;
                        $scope.IsVisiblebtn = false;

                    

                        $scope.loadDriverInsurance = function() {
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.getdriverInsurance}',$scope.id,$scope.attachmentid,
                                function(result, event) {
                                    if(event.status) {
                                       $scope.driverInsurance = JSON.parse(result);
                                       $scope.$apply();
                                    }
                                },
                                {escape: false}
                            );
                        }

                        $scope.loadDriverInsurance();
                        $scope.showToast = function(message, error) {
                            if(error)
                                toastr.error(message);
                            else
                                toastr.success(message);
                        }

                        /* Sorting For table */
                        $scope.sortKey1 = 'Month';   //set the sortKey to the param passed   
                        $scope.reverse1 = false;
                        $scope.sort1 = function(keyname){
                            //set the sortKey to the param passed
                            $scope.reverse1 = ($scope.sortKey1 === keyname)? !$scope.reverse1 : false;//if true make it false 
                            $scope.sortKey1 = keyname;
                        }
                        $scope.active = true;
                        $scope.active1 = true;
                        $scope.selectedYear = '';
                        $scope.fetchMileage = function(clickedyear){
                            $('#spinner').show();
                            $scope.mileages = [];
                            $scope.selectedYear = clickedyear;
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.getAllReimbursements}',$scope.selectedYear,$scope.id,$scope.accid,
                                function(result, event) {
                                    if(event.status && result != null){
                                        if(result != ''){
                                            $scope.mileages = [];
                                            $scope.mileages = JSON.parse(result);
                                         //   console.log($scope.mileages);   
                                        }else{

                                            $scope.mileages = [];
                                        }
                                        $('#spinner').hide();
                                        $scope.$apply();
                                    }
                                    else
                                    {
                                        $('#spinner').hide();
                                        toastr.error('Something went wrong.');
                                    }
                                },
                                {escape: false}
                            );
                        }

                        $scope.sortKey = 'intmonth';    //set the sortKey to the param passed   
                        $scope.reverse = true;
                        $scope.sort = function(keyname){
                            $scope.reverse = ($scope.sortKey === keyname)? !$scope.reverse : false; 
                            $scope.sortKey = keyname; 
                        }

                        $scope.sortKey1 = 'intmonth';   //set the sortKey to the param passed   
                        $scope.reverse1 = true;
                        $scope.sort1 = function(keyname){
                            $scope.reverse1 = ($scope.sortKey1 === keyname)? !$scope.reverse1 : false; 
                            $scope.sortKey1 = keyname; 
                        }

                        $scope.complianceCalculation = function() {
                            $('#spinner').show();
                            $scope.detailreportfordownload = [];
                            $scope.summaryreportfordownload = [];
                            $scope.filenamefordetail = $scope.adminname + ' Annual Tax Liability Detail Report';
                            $scope.fileNameforsummary = $scope.adminname + ' Annual Tax Liability Summary Report';
                            
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.getCompliance}',$scope.id,
                                function(result, event) {
                                    if(event.status && result != null) {
                                        $scope.dummyname = JSON.parse(result[0]);
                                        $scope.messageofcompliance = JSON.parse(result[1]);
                                        if (result.length > 2) {
                                            $scope.$apply(function () {
                                                $scope.compliancedata = JSON.parse(result[2]);
                                                $scope.detailreport = JSON.parse(result[3]);
                                                $scope.summaryreport = JSON.parse(result[4]);
                                                $scope.Reimbursements = JSON.parse(result[5]);
                                                $scope.maxallow = JSON.parse(result[6]);
                                                $scope.taxliablity = JSON.parse(result[7]);
                                            });
                                            
                                            $scope.detailreportfordownload.push(["Year", "Month", "Employee Id", "Email", "Driver Name", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                            angular.forEach($scope.detailreport, function (item) {
                                                $scope.detailreportfordownload.push([item.year, item.month, item.employeeid, item.emailid, item.drivername, "$" + item.totalreim, "$" + item.iRSallowable, "$" + item.imputedincome]);

                                            });
                                            $scope.detailreportfordownload.push([" ", " ", " ", " ", " ", "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + $scope.taxliablity]);

                                            $scope.summaryreportfordownload.push(["Employee Id", "Email", "Driver Name", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                            angular.forEach($scope.summaryreport, function (item) {
                                                $scope.summaryreportfordownload.push([item.employeeid, item.emailid, item.drivername, "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + item.imputedincome]);
                                            });
                                            $scope.$apply(function(){
                                                $scope.summrylenth = $scope.summaryreportfordownload.length
                                            });
                                            $('#spinner').hide();
                                        }
                                        else
                                        {   
                                            $scope.$apply(function(){
                                                $scope.compliancedata = [];
                                                $scope.summrylenth = 0;
                                            });
                                            $('#spinner').hide();
                                        }
                                    }
                                },
                                {escape: false}
                            );
                        }

                        $scope.displymodal = function() {
                            angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).removeClass("displaynone");
                            angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).addClass("displayblock");
                        }

                        /* For File Upload*/
                        $scope.filedata = '';
                        $scope.IsVisiblebtn = false;
                        var choosefile;
                        $scope.loadDropfile = function(files) {
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            choosefile = files;
                            var file = files[0]
                            choosenfileType = files[0].type;
                            chooseFileName = files[0].name;
                            choosefile = files;
                            if(files[0].size > 0  &&  files[0].size < 4350000){
                                document.getElementById("uploadBtn").style.visibility = "hidden";
                                $scope.uploadVisible = false;
                                $scope.IsVisiblebtn = true;
                                choosefile = files;
                            }
                            else{
                                $scope.IsVisiblebtn = false;
                                toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .'); 
                            }
                            var reader = new FileReader();
                            reader.onload = function(e) {                                
                                $scope.filedata = reader.result;  
                            };
                            reader.readAsDataURL(file);
                            $scope.$apply(); 
                        }
                        
                        $scope.file_changed = function(element) {
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.filedata = '';
                            choosefile = element;
                            if(choosefile.files[0].size > 0  &&  choosefile.files[0].size < 4350000){
                                document.getElementById("uploadBtn").style.visibility = "hidden";
                                $scope.uploadVisible = false;
                                $scope.IsVisiblebtn = true;
                                choosefile = element;
                            }
                            else{
                                $scope.IsVisiblebtn = false;
                                toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .'); 
                            }
                            var fl = choosefile.files[0].size;
                            $scope.IsVisiblebtn
                            $scope.$apply(function(scope) {
                                var photofile = element.files[0];
                                choosenfileType = photofile.type;
                                chooseFileName = photofile.name;
                                var reader = new FileReader();
                                $scope.fsize = element.files[0].size;
                                reader.onload = function(e) {
                                    $scope.filedata = reader.result;    
                                };
                                reader.readAsDataURL(photofile);
                            });
                        };

                        var maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
                        var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
                        var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 
                        var attachment;
                        var attachmentName;
                        var fileSize;
                        var positionIndex;
                        var doneUploading;
                        $scope.uploadFileInChunk = function(element) {
                            var file = choosefile.files[0];                            
                            if(file != undefined) {
                                if(file.size <= maxFileSize) {
                                    attachmentName = chooseFileName;
                                    var fileReader = new FileReader();
                                    fileReader.onloadend = function(e) {
                                        attachment = window.btoa(this.result);  
                                        positionIndex=0;
                                        fileSize = attachment.length;
                                        doneUploading = false;
                                        if(fileSize < maxStringSize) {
                                            uploadAttachment(null);
                                        } else {

                                            toastr.error('Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + "."'); 
                                        }
                                    }
                                    fileReader.onerror = function(e) {
                                        toastr.error('There was an error reading the file.  Please try again.'); 
                                    }
                                    fileReader.onabort = function(e) {
                                        toastr.error('There was an error reading the file.  Please try again.');
                                    }
                                    fileReader.readAsBinaryString(file);
                                    angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).removeClass("displayblock");
                                    angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).addClass("displaynone");
                                    $('#adminrosterImportProcess').modal('show');
                                } 
                                else 
                                {
                                    toastr.error('File must be under 4.3 MB in size.  Your file is too large.  Please try again.');
                                    //angular.element(document.querySelector("#adminrosterImportProcess")).addClass("displaynone");
                                    /*alert("File must be under 4.3 MB in size.  Your file is too large.  Please try again.");*/

                                    //angular.element(document.querySelector("#box__uploading")).addClass("displaynone");
                                    //angular.element(document.querySelector("#box__input")).addClass("displayblock");
                                    //angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).addClass("displayblock");
                                }
                            } 
                            else 
                            {
                                $scope.IsVisiblebtn = false;    
                                toastr.error('You must choose a file before trying to upload it');
                                $('#adminrosterImportProcess').modal('hide');
                            }
                        }
                        $scope.dismismodal = function() {
                            angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).removeClass("displayblock");
                            angular.element(document.querySelector("#driver-dashboard-upload-insurancebtn")).addClass("displaynone");
                            $('.modal-backdrop').remove();
                        }
                        function uploadAttachment(fileId) {
                            var attachmentBody = "";
                            if(fileSize <= positionIndex + chunkSize) {
                                attachmentBody = attachment.substring(positionIndex);
                                doneUploading = true;
                            } else {
                                attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
                            }
                           
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.readFromFileInchunk}',attachmentBody, attachmentName, fileId,$scope.id,$scope.accid,$scope.attachmentid,
                                function(result, event) {
                                    if(event.status) {
                                        if(event.type === 'exception') {
                                            //console.log(event);
                                        }
                                        else if(event.status) {
                                            if(doneUploading == true) {
                                                // $('#adminrosterImportProcess').modal('toggle');
                                                // $('#driver-dashboard-upload-insurancebtn').modal('toggle');
                                                // $scope.$apply(function(){
                                                //     $('.modal-backdrop').remove();
                                                // });
                                                document.getElementById('file').value = '';

                                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.drivermanagermydetailcontroller.getDriverDetailsClone}',$scope.id,
                                                    function(result, event) {
                                                        if(event.status){
                                                            $scope.empContact = JSON.parse('{!DriverDetails}');
                                                            if($scope.empContact[0].Insurance_Attachment_Id__c != '' && $scope.empContact[0].Insurance_Attachment_Id__c != null && $scope.empContact[0].Insurance_Attachment_Id__c != undefined) {
                                                                $scope.$apply(function(){
                                                                    $scope.attachmentid = $scope.empContact[0].Insurance_Attachment_Id__c ;    
                                                                });
                                                            }
                                                            else
                                                            {
                                                                $scope.attachmentid = null;
                                                            }
                                                        }
                                                        $scope.$apply();
                                                    },
                                                    {escape: false}
                                                );
                                                toastr.success("Within two weeks you will be notified of your compliance status");
                                                $scope.loadDriverInsurance();
                                                $scope.IsVisiblebtn = false;
                                                setTimeout(function(){
                                                     $('.modal-backdrop').remove();
                                                     $('#adminrosterImportProcess').modal('hide');
                                                     location.reload();             
                                                }, 4000); 
                                            } 
                                            else 
                                            {
                                                positionIndex += chunkSize;
                                                uploadAttachment(result);
                                            }
                                        } else {
                                           // console.log(event.message);
                                        } 
                                    }
                                    else
                                    {
                                        $('#adminrosterImportProcess').modal('toggle');
                                        toastr.error('Some error has occur');
                                    }
                                },
                                {buffer: true, escape: true, timeout: 120000}
                            );
                        }
            }]);
            app.directive('excelExport',function () {
                    return {
                        restrict: 'A',
                        scope: {
                            fileName: "@",
                            data: "&exportData"
                        },
                        replace: true,
                        template: '<button class="btn btn-primary float-right mr-11" ng-click="download()">Download <i class="fa fa-download"></i></button>',
                        link: function (scope, element) {
                            
                            scope.download = function() {
                                function datenum(v, date1904) {
                                    if(date1904) v+=1462;
                                    var epoch = Date.parse(v);
                                    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                                };
                                
                                function getSheet(data, opts) {
                                    var ws = {};
                                    var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
                                    for(var R = 0; R != data.length; ++R) {
                                        for(var C = 0; C != data[R].length; ++C) {
                                            if(range.s.r > R) range.s.r = R;
                                            if(range.s.c > C) range.s.c = C;
                                            if(range.e.r < R) range.e.r = R;
                                            if(range.e.c < C) range.e.c = C;
                                            var cell = {v: data[R][C] };
                                            if(cell.v == null) continue;
                                            var cell_ref = XLSX.utils.encode_cell({c:C,r:R});
                                            
                                            if(typeof cell.v === 'number') cell.t = 'n';
                                            else if(typeof cell.v === 'boolean') cell.t = 'b';
                                            else if(cell.v instanceof Date) {
                                                cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                                cell.v = datenum(cell.v);
                                            }
                                            else cell.t = 's';
                                            
                                            ws[cell_ref] = cell;
                                        }
                                    }
                                    if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                    return ws;
                                };
                                
                                function Workbook() {
                                    if(!(this instanceof Workbook)) return new Workbook();
                                    this.SheetNames = [];
                                    this.Sheets = {};
                                }
                                 
                                var wb = new Workbook(), ws = getSheet(scope.data());
                                /* add worksheet to workbook */
                                wb.SheetNames.push(scope.fileName);
                                wb.Sheets[scope.fileName] = ws;
                                var wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'binary'});

                                function s2ab(s) {
                                    var buf = new ArrayBuffer(s.length);
                                    var view = new Uint8Array(buf);
                                    for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                    return buf;
                                }
                                saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), scope.fileName+'.xlsx');
                            };
                        }
                    };
            });
 
            app.directive('mydetailReimbursementsDialogDirective', [ 
                    function() {
                        return {
                            restrict: 'E',
                            scope: {
                                model: '=',
                                data: "&exportData",
                            },

                            link: function(scope, element, attributes) {
                                scope.$watch('model.visible', function(newValue) {
                                    var modalElement = element.find('.modal');
                                    modalElement.modal(newValue ? 'show' : 'hide');
                                    if(newValue == true) {
                                        scope.init()
                                        if(scope.model.mileageList.length > 8)
                                            scope.showmanagermodalsearchbar = true;        
                                        else
                                            scope.showmanagermodalsearchbar = false;
                                    }
                                });

                               /* scope.sortKey = 'Trip_Date__c';   
                                scope.reverse = false;
                                scope.sort = function(keyname) {
                                    scope.reverse = (scope.sortKey === keyname) ? !scope.reverse : false;
                                    scope.sortKey = keyname;
                                };*/
                                scope.showData=[]
                                scope.total = 0 ;
                                scope.totalvariablerate = 0 ;
                                scope.currentPage=1;
                                scope.lastIndex=0;
                                scope.maxPage = 0;
                                scope.totalRecords;
                                scope.reverse = false;
                                scope.search="";
                                scope.itemPerPage = 8;
                                scope.searchedArray = [];
                                scope.showmanagermodalsearchbar = false;
                                scope.init = function () {
                                scope.showData = [];
                                scope.total = 0.0;
                                scope.totalvariablerate = 0.0;
                                scope.maxPage = 0;
                                scope.totalRecords = scope.model.mileageList.length;
                                scope.model.mileageList
                                let tl = 0;
                                let tv = 0;
                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                scope.totalRecords
                                for (var i = 0; i < scope.itemPerPage; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }
                            scope.next = function () {
                                
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                let tl = 0;
                                let tv = 0;
                                
                                for (var i = scope.lastIndex; i < lstInd + scope.itemPerPage; i++) {
                                  let isSearch = scope.searchedArray.length>0?true:false
                                    if(isSearch){
                                        if (scope.searchedArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                        tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                        scope.showData.push(scope.searchedArray[i])
                                        }
                                    }else{
                                        if(scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                   // scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }
                                
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage++;
                            }
                            scope.previous = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                let tl = 0;
                                let tv = 0;
                                var lstInd = scope.lastIndex;
                                for (var i = scope.lastIndex - (scope.itemPerPage*2); i < lstInd - scope.itemPerPage; i++) {
                                 let isSearch = scope.searchedArray.length>0?true:false
                                    if(isSearch){
                                        if (scope.searchedArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                        tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                        scope.showData.push(scope.searchedArray[i])
                                        }
                                    }else{
                                        if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    }
                                   // scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage--;
                            }
                                scope.sortKey = 'tripdate';   
                                scope.sort = function (keyName) {
                                //$scope.reverse = !$scope.reverse;
                                    scope.reverse = (scope.sortKey === keyName) ? !scope.reverse : false;
                                    scope.sortKey = keyName;
                                    
                                    if (keyName === 'mileage' || keyName === 'variableamount') {
                                        
                                       scope.model.mileageList.sort(function (a, b) {
                                            var nameA = parseInt(a[keyName]),
                                                nameB = parseInt(b[keyName]);
                                                
                                            if (scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return valuscope.model.mileageList=e (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    if (keyName === 'origin' || keyName === 'destination') {
                                       scope.model.mileageList.sort(function (a, b) {
                                            var nameA = a[keyName].toLowerCase(),
                                                nameB = b[keyName].toLowerCase()
                                            if (scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    if (keyName === 'tripdate' || keyName === 'submitteddate') {
                                       scope.model.mileageList.sort(function (a, b) {
                                            var dateA = new Date(a[keyName].toLowerCase()),
                                                dateB = new Date(b[keyName].toLowerCase())
                                            if (scope.reverse) {
                                                if (dateA < dateB) //sort string ascending
                                                    return -1
                                                if (dateA > dateB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (dateA < dateB) //sort string ascending
                                                    return 1
                                                if (dateA > dateB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                        })
                                    }
                                    scope.showData = [];
                                    scope.total = 0;
                                    scope.totalvariablerate = 0;
                                    var lstInd = scope.lastIndex;
                                    
                                    for (var i = scope.lastIndex - scope.itemPerPage; i < lstInd; i++) {
                                        
                                        if (scope.model.mileageList[i]) {
                                            scope.total = scope.total + parseInt(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseInt(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                        scope.lastIndex = i + 1;
                                    }
                                    scope.showData
                                }

                                scope.updatePagination=function()
                                 {
                                        if(scope.search.length>0){
                                        scope.itemPerPage = 8;
                                        
                                        var filteredArray = scope.model.mileageList.filter(function(number) {
                                            if(number.origin != '' && number.origin != null && number.origin != undefined && number.destination != '' && number.destination != null && number.destination != undefined){
                                             
                                             return number.origin.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1||number.destination.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1;
                                          }
                                          return number.origin,number.destination;
                                    });
                                        
                                        scope.searchedArray = filteredArray;
                                        scope.showData = [];
                                        scope.total = 0.0;
                                        scope.totalvariablerate = 0.0;
                                        scope.maxPage = 0;
                                        scope.totalRecords = filteredArray.length;
                                        
                                        let tl = 0;
                                        let tv = 0;
                                        scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                        scope.totalRecords
                                        for (var i = 0; i < scope.itemPerPage; i++) {
                                        scope.currentPage = 1;
                                        if (filteredArray[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                        tl = tl + parseFloat(filteredArray[i].mileage);
                                        tv = tv + parseFloat(filteredArray[i].variableamount);
                                        /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        scope.showData.push(filteredArray[i])
                                        }
                                        scope.lastIndex = i + 1;
                                        }
                                        scope.total = tl.toFixed(2);
                                        scope.totalvariablerate = tv.toFixed(2);
                                        
                                        
                                        }else{
                                        scope.itemPerPage = 8;
                                        scope.init();
                                        }
                                        
                                        
                                 }
                                element.on('shown.bs.modal', function() {
                                    scope.$apply(function() {
                                        scope.sort("tripdate");
                                        scope.model.visible = true; 
                                       
                                    });
                                });

                                element.on('hidden.bs.modal', function() {
                                    scope.$apply(function() {
                                        scope.sort("tripdate");
                                        scope.model.visible = false;
                                        scope.search="";
                                        scope.searchedArray.length = 0;
                                    });
                                });

                                $('input[type=search]').on('search', function () {
                                    scope.search="";
                                    scope.searchedArray.length = 0;
                                });
                            },
                        
                            template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog"aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4>{{model.clickedMonth}}</h4><div class="modal-divider"></div><div class="table-responsive"><div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="showmanagermodalsearchbar"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap  no-footer dataTable" cellspacing="0" width="100%" ><thead><tr><th ng-click="sort(\'tripdate\')">Trip Date<span ng-show="sortKey == \'tripdate\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}"></span></th><th ng-click="sort(\'origin\')">Origin<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'origin\'"></span></th><th ng-click="sort(\'destination\')">Dest.<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'destination\'"></span></th><th ng-click="sort(\'submitteddate\')">Submitted<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'submitteddate\'"></span></th><th ng-click="sort(\'approveddate\')">Approved<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'approveddate\'"></span></th><th ng-click="sort(\'mileage\')">Mileage<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'mileage\'"></span></th><th ng-click="sort(\'variableamount\')">Variable Amount<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'variableamount\'"></span></th></tr></thead><tbody class="table-a-link"><tr ng-repeat="mil in showData | filter:search""><td ng-model="mil.tripdate">{{ mil.tripdate}}</td><td ng-model="mil.origin">{{ mil.origin}}</td><td ng-model="mil.destination">{{ mil.destination }}</td><td ng-model="mil.submitteddate">{{ mil.submitteddate }}</td><td ng-model="mil.approveddate">{{mil.approveddate }}</td><td ng-model="mil.mileage">{{ mil.mileage }}</td><td ng-model="mil.variableamount">${{ mil.variableamount }}</td></tr></tbody><tfoot ng-if="showData.length > 0"><tr><th scope="row" colspan="5">Total</th><th>{{total | number:2}} / {{model.totalMileage | number:2 }}</th><th>${{totalvariablerate}} / ${{model.totalVariableAmount}}</th></tr></tfoot></table></div></div><div class="modal-footer"><div class="col-md-6" ng-if="showData.length > 0">Page {{currentPage}} of {{maxPage}}</div><div class="col-md-6"><ul ng-if="showData.length > 0" class="pagination float-right paginationformodal"><li class="page-item "  ng-class="{\'disable-pagination\':currentPage === 1}"><a class="page-link" ng-click="previous()">Previous</a></li><li class="page-item"><a class="page-link" >{{currentPage}}</a></li><li class="page-item"  ng-class="{\'disable-pagination\':currentPage === maxPage}"><a class="page-link" ng-click="next()" href="#">Next</a></li></ul><div class="paginationformodaldownloadbutton"><div excel-export="true" export-data="data()" ng-show="showData.length > 0" file-name="{{model.fileName}}"/><button class="btn btn-secondary float-right" ng-click="onClick();" ng-if="showData.length > 0">Submit</button></div></div></div></div></div></div></div>'
                        };
                    }
            ]);

          
        </script>
    </head>
   <body ng-app="driveradminDashboardModule" ng-controller="driveradminmanagermydetail" ng-cloak="true" id="theBody">
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="!admindriver" href="/app/drivermanagerdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)" alt="logo"/>
                                </a>
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)" alt="logo"/>
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse"
                                    data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon"><i class="fa fa-bars"></i></span>
                                </button>

                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    
                                    <ul class="navbar-nav flex-row alignitemscenter">
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/drivermanagerdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">Dashboard</a>
                                        </li>
                                        <li class="nav-item active">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}">My Details</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">My Details</a>
                                        </li>
                                        <li class="nav-item">                           
                                            <a data-toggle="modal" data-target="#driver-dashboard-upload-insurancebtn"
                                                class="btn btn-secondary float-right" ng-click="displymodal()"> Upload Insurance
                                            </a>
                                        </li>                                            
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Upload Insurance button Model -->
    <div class="modal fade driver-dashboard-upload-insurancebtn" tabindex="-1" role="dialog"
        aria-labelledby="driver-dashboard-upload-insurancebtn" id="driver-dashboard-upload-insurancebtn">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content rounded-0">
                <button type="button" class="close popup-close-btn"  data-dismiss="modal" ng-click ="dismismodal()" aria-label="Close"><!-- ng-click ="dismismodal()" -->
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div
                                class="offset-md-3 offset-lg-3 offset-xl-3 col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 px-0">
                                <div class="text-center my-3 my-sm-3 my-md-3 my-lg-3">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/adminroster-importfile.png')}" class="img-fluid" alt="Admin roster import file"/>
                                    <div class="image-Insurancetext"><span class="greenText">Insurance</span><span class="greenText2">Dec Page</span></div>
                                    <div class="image-cardtext"><span class="redText">Insurance Card</span></div>
                                    <div class=" my-3 my-sm-3 my-md-3 my-lg-3 insDiv">
                                        <p class="fileupload-title">
                                            <span class="font-weight-bold">
                                                Upload your insurance declaration page <span class="underline">NOT</span> your insurance card <a class="tagquestion" href="https://www.thebalance.com/what-is-an-insurance-declaration-page-2645728" title="What is an insurance dec page?<br/>(https://hubs.ly/H0mmxzz0)" data-toggle="tooltip"  data-html="true" data-placement="top" target="_blank"><i class="fa fa-question"></i></a>
                                            </span>
                                        </p>
                                    </div>
                                </div>
                                <form method="post" id="boxform1" action="" enctype="multipart/form-data" class="box">
                                    <div class="box__input" accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" id="box__input">
                                        <svg class="box__icon" xmlns="" width="50" height="43" viewBox="0 0 50 43">
                                            <path
                                                d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" />
                                        </svg>
                                        
                                        <input type="file" name="file" id="file" class="box__file" multiple="false" accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" onchange="angular.element(this).scope().file_changed(this)"/>
                                        <label class="w-100 text-center">
                                            <strong>Drop your files here or</strong>
                                        </label>
                                        <button class="btn btn-outline-secondary box__dragndrop pull-right1" id="uploadBtn" type="button"><span class="uploadtxt" ng-show="uploadVisible">Upload</span></button>
                                        <button 
                                        class="btn btn-outline-secondary justify-content-center box__dragndrop pull-right1" ng-click="uploadFileInChunk($event)" ng-show="IsVisiblebtn" ><span class="uploadtxt">Upload</span></button>
                                    </div>
                                    <div class="box__error w-100 text-center">Error! <span></span>. Try again!</div> 
                                    <div class="box__uploading w-100 text-center" id="box__uploading"><img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/adminroster-importfile-loader.svg')}
                                    "/></div>
                                    <div class="box__success w-100 text-center">Done! </div>
                                    <div class="box__error w-100 text-center">Error! <span></span>. Try again!</div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
          <!-- Upload Insurance button Model Ends -->
        <section class="container-fluid">
            <div class="font-s my-3">
                <h1 class="form-heading mb-30">{{contactname}}</h1>
            </div>
            <div class="form-divider"></div>
            <div class="row">
                <div class="col-md-12 col-sm-12 col-xl-9 col-lg-9">
                    <div class="row">
                        <div class="col-12 col-md-4 col-sm-12 col-xl-4 col-lg-4">
                            <div class="admin-driver-detail-dashboard">
                                <div class="location-info">
                                    <div class="admin-driver-dashboard-address">
                                        <h5>Location</h5>
                                        <p>{{ empContact[0].MailingCity }}</p>
                                        <p>{{ empContact[0].MailingState + " " + empContact[0].MailingPostalCode }}</p>
                                    </div>
                                    <div class="admin-driver-dashboard-address">
                                        <h5>Fixed Rate</h5>
                                        <p>${{ empContact[0].Fixed_Amount__c }}</p>
                                    </div>
                                    <div class="admin-driver-dashboard-address">
                                        <h5>Compliance</h5>
                                        <p>{{ empContact[0].compliancestatus__c }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-5 col-sm-12 col-xl-4 col-lg-5 ">
                            <div class="col-12 col-md-12 col-lg-12 col-xl-12 pl-sm-0">
                                <div class="admin-driver-dashboard-milagedetail">
                                    <div class="row">
                                        <div class="col-3 col-sm-3 col-md-4 col-lg-3 col-xl-3 ">
                                            <div class="fuel-icon">
                                                <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/fuelpump-icon.png')}" alt="icon"/>
                                            </div>
                                        </div>
                                        <div class="col-9 col-sm-9 col-md-8 col-lg-9 col-xl-9">
                                            <div class="fuel-icon-detail">
                                                <h5>Fuel Price</h5>
                                                <p ng-if="fuelprice == ''"></p>
                                                <p ng-if="fuelprice != ''">${{fuelprice}}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="driver-dashboard-milagedetail mt-2">
                                    <div class="row">
                                        <div class="col-3 col-sm-3 col-md-3">
                                            <div class="fuel-icon">
                                                <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/car-icon.png')}" alt="icon"/>
                                            </div>
                                        </div>
                                        <div class="col-9 col-sm-9 col-md-9">
                                            <div class="fuel-icon-detail">
                                                <h5>Unapproved Mileage</h5>
                                                <p ng-if="showunapprove">{{unapprovemileage}}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-12 col-xl-4 col-lg-3 mb-3 mb-sm-0 mb-md-0 mt-3 mt-sm-0 mt-md-0">
                            <div class="col-6 col-sm-6 col-md-6 float-right" ng-if="empContact.Account.Logo_Document_Id__c != ''">
                                 <img class="img-fluid" ng-src="{{empContact[0].Account.Logo_Document_Id__c}}"></img>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12 col-xl-3 col-lg-3">
                    <div class="driver-dashboard-card">
                        <div ng-if="empContact.Car_Image__c == undefined && empContact.Car_Image__c == ''">
                            <img class="card-img-top" src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/car.png')}" alt="Car image"/>
                        </div>
                        <div ng-if="empContact.Car_Image__c != ''">
                            <img class="img-fluid" ng-src="{{empContact[0].Car_Image__c}}"></img>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">{{ empContact[0].Vehicle_Type__c }}</h5>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-divider"></div>
            <div class="my-5 admin-roster-tab-section">
                <ul class="nav nav-pills">
                    <li class="nav-item mb-3">
                        <a class="nav-link active" data-toggle="pill" href="#pills-admin-dashbord-myteam">My Trips</a>
                    </li>
                    <li class="nav-item mb-3">
                        <a class="nav-link" data-toggle="pill" href="#pills-admin-dashbord-mileage">Plan Info</a>
                    </li>
                </ul>
                <div class="tab-content timeline">
                    <div class="tab-pane active" id="pills-admin-dashbord-myteam">
                        <div id="accordion" role="tablist">
                            <div class="card insurance-declatarion-card" ng-repeat="yr in years">
                                <div class="card-header" role="tab" id="Cardheading">
                                    <h5 class="mb-0">
                                        <a class="collapsed" data-toggle="collapse" href="#collapseCard{{$index}}" aria-expanded="false" aria-controls="collapseCard" ng-click="fetchMileage(yr)" >
                                          {{yr}}
                                        </a>
                                    </h5>
                                </div>
                                <div id="collapseCard{{$index}}" class="collapse" role="tabpanel" aria-labelledby="Cardheading"
                                    data-parent="#accordion">
                                    <div class="card-body">
                                        <div class="table-responsive">
                                            <table id="driver-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0"
                                                width="100%">
                                                <thead>
                                                    <tr>
                                                        <th >Month
                                                            <span class="sort-icon pull-right" ng-show="sortKey1=='Month'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span> 
                                                        </th>
                                                        <th >Fuel
                                                            <span class="sort-icon pull-right" ng-show="sortKey1=='Fuel'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                                        </th>
                                                        <th >Mileage
                                                            <span class="sort-icon pull-right" ng-show="sortKey1=='mileage'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                                        </th>
                                                        <th >Fixed + Variable<br/>Reimbursement
                                                            <span class="sort-icon pull-right" ng-show="sortKey1=='Reimbursements'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"> 
                                                        </span>
                                                        </th>
                                                        <th >Total Reimbursement
                                                            <span class="sort-icon pull-right" ng-show="sortKey1=='totalReimbursements'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody class="driver-dashboard-table table-a-link">
                                                    <tr ng-repeat="ml in mileages |orderBy:sortKey1:reverse1">
                                                        <td ng-click="openmodal(ml.month)"><a>{{ml.month}}</a></td>
                                                        <td ng-if="ml.fuel != null && ml.fuel != ''">${{ml.fuel}}</td>
                                                        <td ng-if="ml.fuel == null || ml.fuel == ''"></td>
                                                        <td>{{ml.mileage|currency:value=""}}</td><!--AI-000212 -->
                                                        <td>{{ml.varibleAndFixedReimbursements}}</td>
                                                        <td>${{ml.totalReimbursements}}</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="pills-admin-dashbord-mileage">
                        
                        
                        <c:PlanInfoComponent driverPacketDocCount="{!obj_driverpacket_attachementsize}"
                                             insuranceDocCount="{!obj_attachementsize}"
                                             driverPacketId="{!If(obj_driverpacket_attachementsize > 0, obj_driver_driverpacket[0], null)}"
                                             insuranceId="{!If(obj_attachementsize > 0, obj_driver_insurance[0], null)}" />
                    </div>
                </div>
            </div>
        </section>
        
        <mydetail-reimbursements-dialog-directive model="reimbursementDialog" export-data="exportReimList"></mydetail-reimbursements-dialog-directive>
       
        <!-- The Import file Modal -->
        <div class="modal fade adminrosterImportProcess" tabindex="-1" role="dialog"
            aria-labelledby="adminrosterImportProcess" id="adminrosterImportProcess">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <div class="modal-body text-center">
                        <h4 class="fileupload-title-2">Thank you for uploading your insurance declaration page.</h4>
                        <div class="w-100">
                            <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/adminroster-importfile-loader.svg')}" width="15%" class="img-fluid" alt="Admin roster import file loader"/>
                        </div>
                        <p class="fileupload-title-2 font-weight-bold">New to the program? Your driver packet will be emailed to you via DocuSign in two business days.</p>
                    </div>
                </div>
            </div>
        </div>
        <apex:include pageName="EMC_Common_footer"/>
         <script type="text/javascript">
             $(document).ready(function () {
                $('#uploadBtn').click(function(e){
                    e.preventDefault();
                    $('#file').trigger('click');
                });
                $('.box__input').bind('drop', function(evt){
                    evt.stopPropagation();
                    evt.preventDefault();
                    //let fileType = 'application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                    let fileType = 'application/pdf';
                    if(evt.originalEvent.dataTransfer.files.length > 1) {
                        angular.element('#theBody').scope().showToast('Please select only one file.', true);
                        return;
                    }
                    var files = evt.originalEvent.dataTransfer.files;
                    if(fileType.indexOf(files[0].type) == -1) {
                        angular.element('#theBody').scope().showToast('Please select valid file.',true);
                        return;
                    }
                    //angular.element('#theBody').scope().loadDropfile(files);
                    ($('#file'))[0].files = evt.originalEvent.dataTransfer.files;
                    //alert($('#file').files.size);
                    $('#file').siblings()[1].innerHTML = files[0].name;
                    $('#file').trigger('change');
                })
            });

           
        </script>
</body>
</html>
</apex:page>